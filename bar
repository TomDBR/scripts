#!/bin/bash

# Set colors for bar / tray
bgcolor=$(xrdb -query | grep 'URxvt.background' | cut -d":" -f2 | tr -d "\t" | sed 's/\[[0-9][0-9]\]#/#da/')
fgcolor=$(xrdb -query | grep 'URxvt.foreground' | cut -d":" -f2 | tr -d "\t")

. lemonbar.conf

if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
	printf "%s\\n" "The panel is already running." >&2
	exit 1
fi
. ~/.bashrc


trap 'trap - TERM; kill 0' INT TERM QUIT EXIT
trap "pkill -P $$" INT TERM QUIT EXIT

# Make a named pipe to send all output from this script to

Pipe="/tmp/mybar.info"
[ -e "$Pipe" ] && rm "$Pipe"
mkfifo "$Pipe"

trap 'rm "$Pipe"' INT TERM QUIT EXIT



Volume() {
	while true
	do
		controls=$(pactl list sinks)
		vol=$(echo "$controls" | grep -e "Volume:" | grep -v "Base" | grep -oe "[0-9][0-9]*%" | head -n 1)
		mute=$(echo "$controls" | grep "Mute" | tr -d "\t " | cut -d":" -f2 | head -n 1)
		i="${vol::-1}" # removes last character of string
		if [[ "$mute" = 'no' ]]; then
			if [ $i -gt 50 ]; then
				echo -e "V\\uf028 $vol"
			elif [ $i -gt 0 ]; then
				echo -e "V\\uf027 $vol"
			else
				echo -e "V\\uf026 $vol"
			fi
		else
			echo -e "V\uf6a9 $vol\n"
		fi
		sleep 1
	done
}

DiskUsage() {
	while true
	do
		Mdot2Size="$(df | grep -e "/dev/nvme0n1p2" | sed "s/  */ /g")"
		hddSize="$(df | grep -e "/dev/sd[a-z][0-9]" | sed "s/  */ /g")"
		sizesTotal="$(echo "$hddSize" | cut -d" " -f2)"
		sizesUsed="$(echo "$hddSize" | cut -d" " -f3)"
		sizesAvail="$(echo "$hddSize" | cut -d" " -f4)"
		sizeTotalArray=( $sizesTotal )
		sizeUsedArray=( $sizesUsed )
		sizeAvailArray=( $sizesAvail )
		sumTotal="0"
		sumUsed="0"
		sumAvail="0"
		(( lengthArray="${#sizeUsedArray[@]}" ))
		(( i = 0 ))
		while (( i < "$lengthArray" ))
		do
			sumTotal="$(echo "${sizeTotalArray[$i]} + $sumTotal" | bc)"
			sumUsed="$(echo "${sizeUsedArray[$i]} + $sumUsed" | bc)"
			sumAvail="$(echo "${sizeAvailArray[$i]} + $sumAvail" | bc)"
			(( i++ ))
		done
		if (( ${#sumTotal} > 9 )); then
			sumTotal="$(echo "scale=2; $sumTotal / 1024 / 1024 / 1024" | bc -l)TB"
		elif (( ${#sumTotal} > 6 )); then
			sumTotal="$(echo "scale=2; $sumTotal / 1024 / 1024" | bc -l)GB"
		elif (( ${#sumTotal} > 3 )); then
			sumTotal="$(echo "scale=2; $sumTotal / 1024" | bc -l)MB"
		fi
		if (( ${#sumUsed} > 9 )); then
			sumUsed="$(echo "scale=2; $sumUsed / 1024 / 1024 / 1024" | bc -l)TB"
		elif (( ${#sumUsed} > 6 )); then
			sumUsed="$(echo "scale=2; $sumUsed / 1024 / 1024" | bc -l)GB"
		elif (( ${#sumTotal} > 3 )); then
			sumUsed="$(echo "scale=2; $sumUsed / 1024" | bc -l)MB"
		fi
		if (( ${#sumAvail} > 9 )); then
			sumAvail="$(echo "scale=2; $sumAvail / 1024 / 1024 / 1024" | bc -l)TB"
		elif (( ${#sumTotal} > 6 )); then
			sumAvail="$(echo "scale=2; $sumAvail / 1024 / 1024" | bc -l)GB"
		elif (( ${#sumTotal} > 3 )); then
			sumAvail="$(echo "scale=2; $sumAvail / 1024" | bc -l)MB"
		fi
		echo  -e "D| \\uf0c7 ${sumUsed}/${sumTotal}; ${sumAvail} left"

		sleep 300
	done
}


Music() {
	pgrep mpd &>/dev/null && mpdport="$(ss -tulpn | grep mpd | cut -d":" -f2 | cut -d" " -f1 | grep 66)" && var="$(mpc -h localhost -p "$mpdport" -f "%artist%;%title%" current)" 
	curSong="/tmp/curSong.bar"
	size=60
	buffer="                                                                                             "
	while true
	do
		while ! pgrep mpd &>/dev/null; do echo "M"; sleep 1; done
		case "$var" in
			"")
				pgrep mpd && var="$(mpc -h localhost -p $mpdport -f "%artist%;%title%" current)" 
				;;
			"MPD error"*)
				mpdport="$(ss -tulpn | grep mpd | cut -d":" -f2 | cut -d" " -f1 | grep 66)" 
				while [[ "$mpdport" == "" ]]; do
					mpdport="$(ss -tulpn | grep mpd | cut -d":" -f2 | cut -d" " -f1 | grep 66)" 
					sleep 0.5
					if ! pgrep mpd; then var=""; break; fi
				done
				pgrep mpd && var="$(mpc -h localhost -p "$mpdport" -f "%artist%;%title%" current)" 
				;;
		esac
		if ! [ "$var" == '' ]; then
			artist="$(echo "$var" | sed -E 's/(.*)\;.*/\1/g')"
			(( artistLen=${#artist})) ## length of artist on its own
			title="$(echo "$var" | sed -E 's/.*\;(.*)/\1/g')"
			(( titleLen=${#title})) ## length of title on its own
			total="$artist - $title"
			(( totalLen=${#total} )) ## length of artist and title with ' - ' separator inbetween
			if (( totalLen > size )); then
				## scrollingLen is the amount of characters that are out of view and have to be scrolled in
				(( scrollingLen = totalLen - size ))
				(( i=0 ))
				(( delay=0 )) # Used to prevent text from scrolling out of sight right away, improves readability
				mpc -h localhost -p "$mpdport" -f "%artist%;%title%" current --wait > $curSong 2>&1 & 
				pidmpc=$!
				while kill -0 $pidmpc 2> /dev/null
				do
					#if the artistlength is greater than the title, scroll the whole thing
					if (( artistLen > titleLen )); then 
						if (( i <= scrollingLen )); then
							musicInfo="${total:$i:$size}"
							if (( delay > 8 )); then (( i++ )); else (( delay++ )); fi
						else
							musicInfo="${total:$i}${buffer:0:((i - scrollingLen))}"
							(( i++ ))
							if (( i > totalLen )); then
								(( i=0 ))
								(( delay=0 ))
							fi
						fi
						echo -e "M| \\uf001 $musicInfo"
					#else scroll just the title, artist stays static
					else 
						if (( i <= scrollingLen )); then
							musicTitlePart="${title:$i:((size - artistLen - 3))}"
							if (( delay > 8 )); then (( i++ )); else (( delay++ )); fi
						else
							musicTitlePart="${title:$i}${buffer:0:((i - scrollingLen))}"
							(( i++ ))
							if (( i > ( totalLen - artistLen - 3 ) )); then
								(( i=0 ))
								(( delay=0 ))
							fi
						fi
						echo -e "M| \\uf001 $artist - $musicTitlePart"
					fi
					sleep 0.3
				done
				var="$(cat $curSong)"
			else
				mpc -h localhost -p "$mpdport" -f "%artist%;%title%" current --wait > $curSong 2>&1 &
				pidmpc=$!
				echo -e "M| \\uf001 $artist - $title"
				while kill -0 $pidmpc 2> /dev/null
				do
					wait
				done
				var="$(cat $curSong)"
			fi
		else
			echo "M"
			mpc -h localhost -p "$mpdport" -f "%artist%;%title%" current --wait > $curSong 2>&1 & 
			pidmpc=$!
			while kill -0 $pidmpc 2> /dev/null
			do
				wait
			done
			var="$(cat $curSong)"
		fi
	done
}

# Define the clock
Clock() {
	while true
	do
        	DATETIME=$(date "+%a %d/%m - %H:%M")
        	#echo -e "S\\uf073 ${DATETIME}\n"
        	echo -e "S${DATETIME}\n"
		sleep 60
	done
}

Battery() {
	while true
	do
		BATPRC=$(acpi --battery | cut -d" " -f4 | tr -d ",")
		#BATETA=$(acpi --battery | cut -d" " -f5)
		if   (( ${BATPRC::-1} > 90 )); then echo -e "B\\uf240 $BATPRC\n"
		elif (( ${BATPRC::-1} > 70 )); then echo -e "B\\uf241 $BATPRC\n"
		elif (( ${BATPRC::-1} > 40 )); then echo -e "B\\uf242 $BATPRC\n"
		elif (( ${BATPRC::-1} > 10 )); then echo -e "B\\uf243 $BATPRC\n"
		else echo -e "B\\uf244 $BATPRC\n"; fi
		echo -e "B\\uf242 $BATPRC\n"
		sleep 30
	done
}

Ethernet() {
	while true
	do
		ETH=$(ip -4 addr | grep enp6s0 | grep -oE "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" | head -n 1)
		if [ -z "$ETH" ]; then
			echo -e "IEth: NULL\\n"
		else
			echo -e "IEth: $ETH\\n"
		fi
		sleep 10
	done
}

Wifi() {
	while true
	do
		WIFI=$(ip -4 addr | grep wlp3s0 | grep -oE "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" | head -n 1)
		if [ -z "$WIFI" ]; then
			echo -e "X\\uf1eb NULL"
		else
			echo -e "X\\uf1eb $WIFI"
		fi
		sleep 10
	done
}

xtitle -t 50 -sf "T%s\n" > "$Pipe" &
bspc subscribe report    > "$Pipe" &
bm_date_mod > "$Pipe" &
bm_disk_mod > "$Pipe" &
#Battery > "$Pipe" &
Volume  > "$Pipe" &
Ethernet > "$Pipe" &
#Wifi    > "$Pipe" &
Music   > "$Pipe" &

MONITOR_WIDTH="$(xrandr | sed -nE 's/^.*([0-9]{4})x[0-9]+\+[0-9]+\+[0-9]+.*$/\1/p')"
PANEL_WWIDTH=$(( $MONITOR_WIDTH - 70 ))
lemonbar.input < "$Pipe" | lemonbar \
	-f "Font Awesome 5 Free Solid:pixelsize=11:minspace=true:antialias=true" \
	-f "Misc Ohsnapu:pixelsize=13:antialias=false:minspace=true:spacing=110" \
	-f "basis33:pixelsize=13:antialias=true" \
	-f "osaka_unicode:style=Regular:pixelsize=13:antialias=true" \
	-a 32 -u 2 -n "$PANEL_WM_NAME" -g ${PANEL_WWIDTH}x$PANEL_HEIGHT -F "$fgcolor" -B "$bgcolor" | sh - &

runTray &
transset-df -i $(xdo id -N stalonetray -m) 0.85
trap 'pkill stalonetray' INT TERM QUIT EXIT

wid=$(xdo id -m -a "$PANEL_WM_NAME")
xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"
wid=$(xdo id -m -a "stalonetray")
xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

wait
